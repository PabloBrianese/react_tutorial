{"version":3,"sources":["index.js"],"names":["calculateGameResult","squares","lines","i","length","a","b","c","every","x","Square","props","className","onClick","style","value","Board","winningLine","squareRenderings","Array","from","winningSquare","includes","backgroundColor","renderSquare","boardRows","slice","PlayersMove","hist","move","selectedSquare","squareIndex","y","Math","floor","squareCoordinates","board1","board2","boardDifferencePoint","step","selectedSquareString","JSON","stringify","replace","player","TimeTravelButton","timeTravelDesc","fontWeight","stepNumber","setState","HistoryOrderSwitchButton","class","type","Game","state","history","fill","historyOrderAscending","newStep","this","currentValue","concat","current","gameResult","status","null","line","calculateWinningLine","moves","map","obj","reversedMoves","reverse","renderedMoves","handleClick","changeHistoryOrder","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e9486b2f.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css';\r\n\r\nfunction calculateGameResult(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n\r\n  if (squares.every(x => x)) return 'draw';\r\n\r\n  return null;\r\n}\r\n\r\nfunction calculateWinningLine(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let line of lines) {\r\n    const [a, b, c] = line;\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return line;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick} style={props.style}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nfunction Board(props) {\r\n  const winningLine = props.winningLine;\r\n  function renderSquare(i) {\r\n    const winningSquare = (winningLine) ? winningLine.includes(i) : false;\r\n    return (\r\n      <Square\r\n        value={props.squares[i]}\r\n        onClick={() => props.onClick(i)}\r\n        style={{ backgroundColor: (winningSquare) ? '#ccc' : 'white' }}\r\n      />\r\n    );\r\n  }\r\n\r\n  const squareRenderings = Array.from(Array(9), (x, i) => renderSquare(i));\r\n  const boardRows = Array.from(Array(3), (x, i) => \r\n    <div className=\"board-row\">\r\n      {squareRenderings.slice(3*i, 3*i + 3)}\r\n    </div>\r\n  );\r\n\r\n  return <div>{boardRows}</div>;\r\n}\r\n\r\nfunction PlayersMove(props) {\r\n  const boardDifferencePoint = (board1, board2) => {\r\n    for (let i = 0; i < board1.length; ++i)\r\n      if (board1[i] !== board2[i]) return i;\r\n\r\n    return null;\r\n  }\r\n\r\n  function squareCoordinates(squareIndex) {\r\n    return {\r\n      x: squareIndex % 3 + 1,\r\n      y: Math.floor(squareIndex / 3) + 1,\r\n    };\r\n  }\r\n\r\n  if (props.hist.length > props.move + 1) {\r\n    const boardEnd = props.hist[props.move + 1].squares;  // board at the end of move\r\n    const boardBeginning = props.step.squares;  // board at the beginning of move\r\n    const squareIndex = boardDifferencePoint(boardEnd, boardBeginning);\r\n    const selectedSquare = squareCoordinates(squareIndex);\r\n    const selectedSquareString = JSON.stringify(selectedSquare)\r\n      .replace(/\"/g, '');\r\n\r\n    return (\r\n      <p>\r\n        {player(props.move)} picks {\" \"} {selectedSquareString}\r\n      </p>\r\n    );\r\n  }\r\n  else {\r\n    return (null);\r\n  }\r\n}\r\n\r\nconst player = move => !(move % 2) ? 'X' : 'O';\r\n\r\nfunction TimeTravelButton(props) {\r\n  const timeTravelDesc = props.move ?\r\n    'Go to move #' + props.move :\r\n    'Go to game start';\r\n  const fontWeight = props.move === props.stepNumber ? \"bold\" : \"normal\";\r\n\r\n  function jumpTo(move) {\r\n    props.setState({\r\n      stepNumber: move,\r\n    });\r\n  }  \r\n\r\n  return (\r\n    <button\r\n      onClick={() => jumpTo(props.move)}\r\n      style={{fontWeight: fontWeight}}\r\n    >\r\n      {timeTravelDesc}\r\n    </button>\r\n  );\r\n}\r\n\r\nfunction HistoryOrderSwitchButton(props) {\r\n  return <label class=\"switch\">\r\n    <input type=\"checkbox\" onClick={() => props.onClick()} />\r\n    <span class=\"slider\" />\r\n  </label>;\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [{ squares: Array(9).fill(null) }],\r\n      stepNumber: 0,\r\n      historyOrderAscending: true,\r\n    }\r\n  }\r\n\r\n  setStepNumber(newStep) {\r\n    this.setState({ stepNumber: newStep });\r\n  }\r\n\r\n  changeHistoryOrder() {\r\n    const currentValue = this.state.historyOrderAscending;\r\n    this.setState({ historyOrderAscending: !currentValue });\r\n  }\r\n\r\n  handleClick(i) {\r\n    const state = this.state;\r\n    const history = state.history.slice(0, state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateGameResult(squares) || squares[i]) return;\r\n\r\n    squares[i] = player(state.stepNumber);\r\n\r\n    this.setState({\r\n      history: history.concat([{squares}]),\r\n      stepNumber: history.length,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const gameResult = calculateGameResult(current.squares);\r\n    const status = {\r\n      'X': 'Winner: X',\r\n      'O': 'Winner: O',\r\n      'draw': 'The game ended in a draw',\r\n      null: 'Next player: ' + player(this.state.stepNumber),\r\n    }[gameResult];\r\n\r\n    const winningLine = (gameResult === 'X' || gameResult === 'O') ?\r\n      calculateWinningLine(current.squares): null;\r\n\r\n    const moves = history.map((step, move, hist) => {\r\n      return (\r\n        <li key={move}>\r\n          <TimeTravelButton\r\n            move={move}\r\n            stepNumber={this.state.stepNumber}\r\n            setState={obj => this.setState(obj)}\r\n          />\r\n          <PlayersMove step={step} move={move} hist={hist} /> \r\n        </li>\r\n      );\r\n    })\r\n\r\n    const reversedMoves = moves.map(x => x).reverse()\r\n    const renderedMoves = (this.state.historyOrderAscending) ?\r\n      moves :\r\n      reversedMoves;\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            winningLine={winningLine}\r\n            onClick={(i) => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div className=\"status\">{status}</div>\r\n          <div className = \"history-order-switch-button\">\r\n            <HistoryOrderSwitchButton\r\n                onClick={() => this.changeHistoryOrder()}\r\n            />\r\n          </div>\r\n          <div>\r\n            <ul>{renderedMoves}</ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <body>\r\n    <h1>Tic-tac-toe</h1>\r\n    <Game />\r\n  </body>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}